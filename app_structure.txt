# Teeem app (My App) Structure

This document provides a detailed overview of the file structure for the Teeem app Flutter application, explaining the purpose and functionality of each file.




## UDPATE 15 DECEMBER 2024 (base example update)


## Root Directory

* `.gitignore`: Specifies files and directories to be ignored by Git version control, preventing them from being tracked in the repository.  This helps keep the repository clean and focused on the essential source code.
* `.metadata`: Metadata used by the Flutter IDE, containing information about the project's configuration and state. This file is essential for the IDE to function correctly with the project.
* `analysis_options.yaml`: Configuration file for customizing the Dart code analyzer, allowing developers to define rules and preferences for code style and analysis. This helps maintain code quality and consistency.
* `build.yaml`: Configuration file for the Flutter build process, specifying build settings and targets. This file is crucial for building the application for different platforms.
* `pubspec.lock`: Lockfile generated by the Dart package manager, `pub`, specifying the exact versions of dependencies used in the project. This ensures consistent builds across different environments.
* `pubspec.yaml`: Defines project dependencies, assets, and other configurations. This file is the primary configuration file for the Flutter project.
* `README.md`: Project description and documentation, providing information about the application's purpose, usage, and development.

## Android

* `android/`: Contains the Android platform-specific code and configurations required to build and run the application on Android devices.
    * `android/.gitignore`: Specifies files to be ignored by Git within the Android directory, similar to the root `.gitignore` file.
    * `android/app/`: Contains the Android application-specific code and resources.
        * `android/app/build.gradle`: Build script for the Android application module, configuring build settings, dependencies, and other Android-specific configurations.
        * `android/app/google-services.json`: Configuration file for integrating with Google services, such as Firebase, providing access to various Google APIs and services.
        * `android/app/src/`: Contains the Android source code, including the main activity and generated plugin registrations.
            * `android/app/src/debug/AndroidManifest.xml`: Android manifest file used for debug builds, specifying permissions and configurations specific to debugging.
            * `android/app/src/main/AndroidManifest.xml`: Main Android manifest file, defining the application's structure, components, permissions, and other essential information.
            * `android/app/src/main/java/io/flutter/plugins/GeneratedPluginRegistrant.java`: Auto-generated file that registers Flutter plugins for use in the Android application, enabling access to native Android functionalities.
            * `android/app/src/main/kotlin/com/example/myapp/MainActivity.kt`: Main activity for the Android application, serving as the entry point for the Flutter UI and handling interactions with the Android operating system.
            * `android/app/src/main/res/`: Contains Android resources, such as images, layouts, and values.
                * `android/app/src/main/res/drawable/...`: Drawable resources, including images, icons, and other graphical assets used in the application's UI.
                * `android/app/src/main/res/mipmap/...`: App launcher icons at various resolutions, ensuring proper display on different Android devices.
                * `android/app/src/main/res/values/styles.xml`: Styles for the Android application, defining visual aspects like themes, colors, and typography.
                * `android/app/src/main/res/values-night/styles.xml`: Styles for the Android application in night mode, providing a dark theme for improved visibility in low-light conditions.
            * `android/app/src/profile/AndroidManifest.xml`: Android manifest file used for profile builds, specifying configurations for performance profiling and analysis.
    * `android/build.gradle`: Top-level build script for the Android project, configuring global build settings, dependencies, and other project-wide configurations.
    * `android/gradle.properties`: Properties file for the Android build system, defining settings like Gradle version, JVM options, and other build-related properties.
    * `android/gradle/wrapper/`: Contains the Gradle wrapper files, ensuring consistent Gradle versions across different development environments.
        * `android/gradle/wrapper/gradle-wrapper.jar`: Executable JAR for the Gradle wrapper, responsible for downloading and managing the correct Gradle version.
        * `android/gradle/wrapper/gradle-wrapper.properties`: Properties file for the Gradle wrapper, specifying the Gradle version to use and its download location.
    * `android/settings.gradle`: Settings file for the Android project, including and configuring modules within the project.

## Build

* `build/`: Contains the output generated by the Flutter build process, including compiled code, assets, and other build artifacts.  This directory is typically not tracked in version control.

## Lib (Dart Source Code)

* `lib/`: Contains the Dart source code for the Flutter application, implementing the application's logic, UI, and functionality.
    * `lib/core/`: Core functionalities and utilities used throughout the application.
        * `lib/core/constants/app_constants.dart`: Defines application-wide constants, such as API keys, environment variables, and other configuration values.
        * `lib/core/di/injection.dart`: Configures dependency injection for the application, managing the instantiation and provision of dependencies, promoting modularity and testability.
        * `lib/core/errors/app_exception.dart`: Defines custom exception classes for handling application-specific errors, providing a structured way to manage and report errors.
        * `lib/core/navigation/navigation_service.dart`: Provides a service for navigating between screens within the application, abstracting the navigation logic and simplifying route management.
        * `lib/core/services/`: Contains various services used by the application, such as network connectivity, logging, and data fetching.
            * `lib/core/services/connectivity_service.dart`: Service for checking network connectivity status, allowing the app to react to online/offline changes.
            * `lib/core/services/logger_service.dart`: Service for logging application events and errors, providing valuable insights into the application's behavior and facilitating debugging.
            * `lib/core/services/rating_service.dart`: Service for handling user ratings, managing the submission, retrieval, and display of ratings.
            * `lib/core/services/test_data_service.dart`: Service for providing test data, used for mocking data during development and testing.
            * `lib/core/services/trait_service.dart`: Service for managing user traits, handling the storage, retrieval, and manipulation of user characteristics.
        * `lib/core/theme/app_theme.dart`: Defines the application's theme, including colors, fonts, and other visual styles, ensuring a consistent look and feel across the app.
        * `lib/core/utils/`: Contains utility functions for common tasks, simplifying code and reducing redundancy.
            * `lib/core/utils/app_utils.dart`: General utility functions used throughout the application.
            * `lib/core/utils/step_type_utils.dart`: Utility functions related to step types, handling specific logic related to steps in the application.
            * `lib/core/utils/sync_test.dart`: Test file for synchronization utilities, ensuring the correct functionality of synchronization mechanisms.
    * `lib/data/`: Contains data access and manipulation logic, responsible for interacting with data sources and managing data persistence.
        * `lib/data/models/`: Contains data models representing various entities in the application, providing a structured way to represent and work with data.
            * `lib/data/models/post_model.dart`: Data model for posts, representing the structure and attributes of a post.
            * `lib/data/models/post_model.g.dart`: Generated code for the post model, facilitating serialization and deserialization.
            * `lib/data/models/rating_model.dart`: Data model for ratings, representing the structure and attributes of a rating.
            * `lib/data/models/rating_model.g.dart`: Generated code for the rating model.
            * `lib/data/models/step_type_model.dart`: Data model for step types, representing the different types of steps in the application.
            * `lib/data/models/step_type_model.g.dart`: Generated code for the step type model.
            * `lib/data/models/targeting_model.dart`: Data model for targeting information, representing criteria for targeting specific users or groups.
            * `lib/data/models/targeting_model.g.dart`: Generated code for the targeting model.
            * `lib/data/models/trait_model.dart`: Data model for traits, representing specific characteristics or attributes of users.
            * `lib/data/models/trait_model.g.dart`: Generated code for the trait model.
            * `lib/data/models/user_model.dart`: Data model for users, representing the structure and attributes of a user.
            * `lib/data/models/user_model.g.dart`: Generated code for the user model.
        * `lib/data/repositories/`: Contains data repositories that provide access to data sources, abstracting the underlying data access mechanisms.
            * `lib/data/repositories/firebase_auth_repository.dart`: Repository for authenticating users with Firebase, handling user login, signup, and other authentication-related operations.
            * `lib/data/repositories/firebase_post_repository.dart`: Repository for managing posts stored in Firebase, providing methods for creating, reading, updating, and deleting posts.
            * `lib/data/repositories/firebase_rating_service.dart`: Service for handling ratings stored in Firebase, managing the submission, retrieval, and manipulation of ratings.
            * `lib/data/repositories/firebase_step_type_repository.dart`: Repository for managing step types stored in Firebase, providing methods for accessing and managing different step types.
            * `lib/data/repositories/firebase_user_repository.dart`: Repository for managing user data stored in Firebase, providing methods for accessing and managing user information.
            * `lib/data/repositories/json_post_repository.dart`: Repository for managing posts stored in JSON format, providing methods for working with posts stored in JSON files.
            * `lib/data/repositories/json_step_type_repository.dart`: Repository for managing step types stored in JSON format.
            * `lib/data/repositories/mock_auth_repository.dart`: Mock repository for authentication, used for testing and development without relying on a real authentication backend.
            * `lib/data/repositories/mock_post_repository.dart`: Mock repository for posts, used for testing and development.
            * `lib/data/repositories/mock_rating_service.dart`: Mock service for ratings, used for testing and development.
            * `lib/data/repositories/mock_step_type_repository.dart`: Mock repository for step types, used for testing and development.
            * `lib/data/repositories/mock_user_repository.dart`: Mock repository for users, used for testing and development.
            * `lib/data/repositories/synced_post_repository.dart`: Repository for managing synchronized posts, handling the synchronization of posts between different data sources.
            * `lib/data/repositories/synced_step_type_repository.dart`: Repository for managing synchronized step types.
    * `lib/domain/`: Contains business logic and use cases, implementing the core functionality of the application.
        * `lib/domain/repositories/`: Contains interfaces for data repositories, allowing for abstraction and flexibility in data access.
            * `lib/domain/repositories/auth_repository.dart`: Interface for authentication repositories, defining the methods required for authentication operations.
            * `lib/domain/repositories/post_repository.dart`: Interface for post repositories, defining the methods required for managing posts.
            * `lib/domain/repositories/step_type_repository.dart`: Interface for step type repositories, defining the methods required for managing step types.
            * `lib/domain/repositories/user_repository.dart`: Interface for user repositories, defining the methods required for managing user data.
    * `lib/main.dart`: Entry point of the Flutter application, responsible for initializing the app, setting up dependencies, and displaying the initial screen.
    * `lib/presentation/`: Contains the UI and presentation logic, responsible for rendering the user interface and handling user interactions.
        * `lib/presentation/app.dart`: Root widget of the application, defining the overall app structure, navigation, and theme.
        * `lib/presentation/bloc/`: Contains BLoC (Business Logic Component) implementations, managing application state and logic.
            * `lib/presentation/bloc/auth/`: BLoCs related to authentication, handling authentication state and events.
                * `lib/presentation/bloc/auth/auth_bloc.dart`: BLoC for managing authentication state and events, handling user login, signup, and other authentication-related actions.
                * `lib/presentation/bloc/auth/auth_event.dart`: Events that can be triggered in the authentication BLoC, representing user actions or system events related to authentication.
                * `lib/presentation/bloc/auth/auth_state.dart`: States that the authentication BLoC can be in, representing different stages of the authentication process, such as logged in, logged out, or loading.
            * `lib/presentation/bloc/base/`: Base classes for BLoCs, providing common functionality and structure.
                * `lib/presentation/bloc/base/base_bloc.dart`: Base class for BLoCs, providing common functionality and simplifying the creation of new BLoCs.
        * `lib/presentation/screens/`: Contains screen widgets, representing individual screens in the application.
            * `lib/presentation/screens/auth/`: Screens related to authentication, handling user login and signup.
                * `lib/presentation/screens/auth/login_screen.dart`: Screen for user login, allowing users to enter their credentials and authenticate.
                * `lib/presentation/screens/auth/signup_screen.dart`: Screen for user signup, allowing new users to create accounts.
            * `lib/presentation/screens/create_post/`: Screens related to creating posts, providing an interface for users to create new posts.
                * `lib/presentation/screens/create_post/create_post_screen.dart`: Screen for creating new posts, allowing users to enter post details and submit them.
            * `lib/presentation/screens/debug/`: Screens for debugging purposes, providing tools and information for developers to diagnose and fix issues.
                * `lib/presentation/screens/debug/debug_screen.dart`: Screen for general debugging, providing access to various debugging tools and information.
                * `lib/presentation/screens/debug/traits_test_screen.dart`: Screen for testing traits, allowing developers to test the functionality related to user traits.
            * `lib/presentation/screens/feed/`: Screens related to the feed, displaying a list of posts to users.
                * `lib/presentation/screens/feed/feed_screen.dart`: Screen displaying the feed of posts, showing users a list of posts retrieved from a data source.
                * `lib/presentation/screens/feed/feed_bloc/`: BLoCs related to the feed, managing the state and logic of the feed screen.
                    * `lib/presentation/screens/feed/feed_bloc/feed_bloc.dart`: BLoC for managing the feed state and events, handling actions such as fetching posts, refreshing the feed, and handling user interactions.
                    * `lib/presentation/screens/feed/feed_bloc/feed_event.dart`: Events that can be triggered in the feed BLoC, representing user actions or system events related to the feed.
                    * `lib/presentation/screens/feed/feed_bloc/feed_state.dart`: States that the feed BLoC can be in, representing different stages of the feed, such as loading, displaying posts, or showing an error.
            * `lib/presentation/screens/profile/`: Screens related to user profiles, displaying user information and activity.
                * `lib/presentation/screens/profile/profile_screen.dart`: Screen displaying user profiles, showing user details, posts, and other relevant information.
                * `lib/presentation/screens/profile/profile_bloc/`: BLoCs related to user profiles, managing the state and logic of the profile screen.
                    * `lib/presentation/screens/profile/profile_bloc/profile_bloc.dart`: BLoC for managing user profile state and events, handling actions such as fetching user data, updating profile information, and handling user interactions.
                    * `lib/presentation/screens/profile/profile_bloc/profile_event.dart`: Events that can be triggered in the profile BLoC, representing user actions or system events related to user profiles.
                    * `lib/presentation/screens/profile/profile_bloc/profile_state.dart`: States that the profile BLoC can be in, representing different stages of the profile screen, such as loading, displaying user data, or showing an error.
            * `lib/presentation/screens/splash/`: Screens related to the splash screen, displayed when the app is launching.
                * `lib/presentation/screens/splash/splash_screen.dart`: Initial splash screen displayed when the app launches, typically showing a logo or loading animation while the app initializes.
        * `lib/presentation/widgets/`: Contains reusable UI widgets, providing modular and reusable components for building the user interface.
            * `lib/presentation/widgets/add_trait_dialog.dart`: Dialog for adding traits to a user's profile, allowing users to select and add traits that describe them.
            * `lib/presentation/widgets/animated_gradient_background.dart`: Animated gradient background widget, providing a visually appealing background with animated gradient colors.
            * `lib/presentation/widgets/animated_post_content.dart`: Widget for animating post content, adding dynamic animations to post elements.
            * `lib/presentation/widgets/app_bar.dart`: Custom app bar widget, providing a consistent app bar across different screens.
            * `lib/presentation/widgets/circular_action_button.dart`: Circular action button widget, providing a circular button for triggering actions.
            * `lib/presentation/widgets/empty_state.dart`: Widget to display when there is no data to show, providing a visual cue to the user that no data is available.
            * `lib/presentation/widgets/error_view.dart`: Widget to display errors to the user, providing information about errors that occurred.
            * `lib/presentation/widgets/loading_overlay.dart`: Overlay to display loading progress, indicating to the user that the app is loading data or performing an operation.
            * `lib/presentation/widgets/post_card.dart`: Widget for displaying individual posts, showing post details and allowing user interactions.
            * `lib/presentation/widgets/post_header.dart`: Widget for displaying the header of a post, showing the author, timestamp, and other relevant information.
            * `lib/presentation/widgets/profile_posts_grid.dart`: Widget for displaying a grid of posts on a profile screen, showing a user's posts in a grid layout.
            * `lib/presentation/widgets/rating_stars.dart`: Widget for displaying rating stars, allowing users to rate content or provide feedback.
            * `lib/presentation/widgets/shimmer_loading.dart`: Widget for displaying shimmer loading animations, providing a visually appealing loading effect.
            * `lib/presentation/widgets/sliding_panel.dart`: Sliding panel widget, allowing users to slide a panel in and out of view.
            * `lib/presentation/widgets/step_carousel.dart`: Carousel widget for displaying steps in a process, allowing users to navigate through different steps.
            * `lib/presentation/widgets/step_indicators.dart`: Widget for displaying step indicators, showing the current step in a process.
            * `lib/presentation/widgets/targeting_filter_dialog.dart`: Dialog for filtering content based on targeting information, allowing users to filter content based on specific criteria.
            * `lib/presentation/widgets/user_avatar.dart`: Widget for displaying user avatars, showing a user's profile picture or icon.
            * `lib/presentation/widgets/user_traits.dart`: Widget for displaying user traits, showing a user's characteristics or attributes.
            * `lib/presentation/widgets/filtering/`: Widgets related to filtering content, providing UI elements for filtering and searching.
                * `lib/presentation/widgets/filtering/menu/filter_menu.dart`: Widget for displaying a filter menu, allowing users to select different filter options.
                * `lib/presentation/widgets/filtering/models/`: Models related to filtering, representing filter criteria and options.
                    * `lib/presentation/widgets/filtering/models/filter_menu_item.dart`: Model for a filter menu item, representing a single filter option in the menu.
                    * `lib/presentation/widgets/filtering/models/filter_type.dart`: Enum defining different filter types, representing the different criteria that can be used for filtering.
                * `lib/presentation/widgets/filtering/search/filter_search_bar.dart`: Search bar widget for filtering content, allowing users to search for specific content within the filtered results.
                * `lib/presentation/widgets/filtering/services/filter_service.dart`: Service for performing filtering operations, handling the logic for filtering content based on user input.
            * `lib/presentation/widgets/post_creation/`: Widgets related to post creation, providing UI elements for creating and editing posts.
                * `lib/presentation/widgets/post_creation/in_feed_post_creation.dart`: Widget for creating posts within the feed, allowing users to create posts directly from the feed screen.
                * `lib/presentation/widgets/post_creation/post_step_widget.dart`: Widget for displaying and managing individual steps in post creation, guiding users through the process of creating a post.

## Test

* `test/`: Contains test files for unit and widget testing, ensuring the quality and correctness of the application's code.
    * `test/sync_test_test.dart`: Test file for synchronization utilities, verifying the correct functionality of synchronization mechanisms.
    * `test/widget_test.dart`: Example widget test, demonstrating how to write widget tests for the application's UI components.

## Web

* `web/`: Contains web platform-specific code and resources required to build and run the application on the web.
    * `web/favicon.png`: Favicon for the web application, displayed in the browser tab or bookmark.
    * `web/index.html`: Entry point HTML file for the web application, loading the Flutter web application.
    * `web/manifest.json`: Web app manifest file, containing metadata about the web application, such as its name, icons, and display preferences.
    * `web/icons/`: Contains icons for the web application at various resolutions, ensuring proper display on different devices and screen sizes.
        * `web/icons/Icon-192.png`: App icon (192x192).
        * `web/icons/Icon-512.png`: App icon (512x512).
        * `web/icons/Icon-maskable-192.png`: Maskable app icon (192x192).
        * `web/icons/Icon-maskable-512.png`: Maskable app icon (512x512).



## lib/main.dart (example of file code explanation)

This file serves as the main entry point for the Flutter application. It initializes the app, sets up essential configurations, and launches the root widget.  The `main` function is the starting point of execution. It performs the following key tasks:

1. **Initialization:** Ensures Flutter widgets are ready using `WidgetsFlutterBinding.ensureInitialized()`. This is crucial for setting up the framework correctly.
2. **System UI Configuration:**  Configures the system UI for a full-screen, immersive experience. It hides the status bar and navigation bar, making them transparent.
3. **Dependency Injection:** Initializes app dependencies using `initializeDependencies()`. This sets up services, repositories, and other components required by the app.
4. **App Launch:** Launches the main app widget (`App`) using `runApp()`. This widget acts as the root of the widget tree and defines the overall structure and behavior of the application.

```dart
import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/services.dart';
import 'core/di/injection.dart';
import 'presentation/app.dart';

// Debug flag for development mode
const bool kIsDebug = kDebugMode;

void main() {
  WidgetsFlutterBinding.ensureInitialized();

  // This ensures that all the necessary Flutter widgets are initialized before we start running the app. It's important for setting up the environment correctly.

  // Hide system UI completely
  SystemChrome.setEnabledSystemUIMode(SystemUiMode.leanBack);
  SystemChrome.setSystemUIOverlayStyle(const SystemUiOverlayStyle(
    systemNavigationBarColor: Colors.transparent,
    systemNavigationBarDividerColor: Colors.transparent,
  ));
// These lines configure the system UI, which includes things like the status bar and navigation bar at the top and bottom of the screen. Here, we're making them transparent to give our app a more immersive look.

  // Initialize dependencies
  initializeDependencies();
// This line initializes the dependencies of our app. Dependencies are like external libraries or modules that our app relies on to function correctly. This function sets them up so they can be used throughout the app.

  runApp(const App());
// This is the most important line in this file. It starts our Flutter app by running the "App" widget. The "App" widget is the root of our widget tree, and it defines the overall structure and behavior of our application.
}

